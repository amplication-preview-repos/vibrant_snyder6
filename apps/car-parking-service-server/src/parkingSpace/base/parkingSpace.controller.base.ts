/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParkingSpaceService } from "../parkingSpace.service";
import { ParkingSpaceCreateInput } from "./ParkingSpaceCreateInput";
import { ParkingSpace } from "./ParkingSpace";
import { ParkingSpaceFindManyArgs } from "./ParkingSpaceFindManyArgs";
import { ParkingSpaceWhereUniqueInput } from "./ParkingSpaceWhereUniqueInput";
import { ParkingSpaceUpdateInput } from "./ParkingSpaceUpdateInput";

export class ParkingSpaceControllerBase {
  constructor(protected readonly service: ParkingSpaceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ParkingSpace })
  async createParkingSpace(
    @common.Body() data: ParkingSpaceCreateInput
  ): Promise<ParkingSpace> {
    return await this.service.createParkingSpace({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ParkingSpace] })
  @ApiNestedQuery(ParkingSpaceFindManyArgs)
  async parkingSpaces(@common.Req() request: Request): Promise<ParkingSpace[]> {
    const args = plainToClass(ParkingSpaceFindManyArgs, request.query);
    return this.service.parkingSpaces({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ParkingSpace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async parkingSpace(
    @common.Param() params: ParkingSpaceWhereUniqueInput
  ): Promise<ParkingSpace | null> {
    const result = await this.service.parkingSpace({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ParkingSpace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParkingSpace(
    @common.Param() params: ParkingSpaceWhereUniqueInput,
    @common.Body() data: ParkingSpaceUpdateInput
  ): Promise<ParkingSpace | null> {
    try {
      return await this.service.updateParkingSpace({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ParkingSpace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParkingSpace(
    @common.Param() params: ParkingSpaceWhereUniqueInput
  ): Promise<ParkingSpace | null> {
    try {
      return await this.service.deleteParkingSpace({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
